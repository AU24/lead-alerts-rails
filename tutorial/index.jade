.chapter(data-title='Setting Up The Application')
  .step(data-title='What Are We Building?', data-file='app/views/home/index.haml')
    :markdown
      ## What Are We Building?

      You probably already have landing pages or product detail views in your
      web application, which you're using to generate leads for your business.
      On this tutorial we'll use Twilio SMS to send a message when a new lead
      is found.

      ![Lead Alerts Flow](//s3.amazonaws.com/howtodocs/lead-alerts-flow.png)

      In this example we'll be implementing instant lead alerts for real estate
      (much like [our awesome friends at
      Trulia](//www.twilio.com/customers/stories/trulia)). We'll create a
      landing page for a new house on the market, and notify a real estate agent
      the moment a potential customer requests information.

      Let's see how it works! Click the next arrow above to continue the tutorial.

  .step(
    data-title='Landing Page Data', 
    data-file='app/controllers/home_controller.rb')
    :markdown
      ## Landing Page Data

      To display a landing page for our house, we need some data about
      the fictional house we've put on the market. For demonstration purposes
      we've hard-coded a hash containing information we need.

      ---

      **See Also:**
      * [Action Controller Overview](//guides.rubyonrails.org/action_controller_overview.html)
      * [Hash](//docs.ruby-lang.org/en/2.0.0/Hash.html)

  .step(data-title='Rendering the Landing Page',
    data-file='app/views/home/index.haml')
    :markdown
      ## Rendering the Landing Page

      In our template we insert data about the house and in a sidebar
      we include a form for the user. Here they enter their contact information
      and request more info about the home.

      ---

      **See Also:**
      * [HAML](//haml.info/)

  .step(
    data-title='Creating a Twilio API Client',
    data-file='lib/message_sender.rb',
    data-highlight='6-34')
    :markdown
      ## Creating a Twilio REST API Client

      Now we need to create a helper class with an authenticated Twilio REST
      API client that we can use anytime we need to send a text message. We
      initialize it with our [Twilio Account Credentials](//www.twilio.com/user/account/messaging/dashboard)
      that are stored as environment variables.

      ---

      **See Also:**
      * [Twilio SMS and MMS Quickstart](//www.twilio.com/docs/quickstart/ruby/sms/sending-via-rest)
      * [Using the "lib" directory in Rails](//dockyard.com/blog/ruby/2012/02/14/love-your-lib-directory)

  .step(
    data-title='Handling the POST Request',
    data-file='app/controllers/notifications_controller.rb')
    :markdown
      ## Handling the POST Request

      This code handles the HTTP `POST` request issued by our landing page. It
      uses our `MessageSender` class to send an SMS message to the real estate
      agent's phone number, which is also set as a environment variable. We
      include the lead's name, phone number, and inquiry directly in the body of
      the text message sent to the agent.

      Now the agent has all the information they need to follow up on the lead.

      ---

      **See Also:**
      * [Action Controller Overview](//guides.rubyonrails.org/action_controller_overview.html)

  .step
    :markdown
      ## Where to next?

      That's it! We've just implemented an application to instantly route leads
      to sales people using text messages. If you're a
      Rails developer working with Twilio, you might want to check out these
      other tutorials.

      [**Browser Calls**](//www.twilio.com/docs/tutorials/walkthrough/browser-calls/ruby/rails)

      Twilio Client allows your users to make and receive phone calls in their
      web browsers.

      [**Call Tracking**](//www.twilio.com/docs/tutorials/walkthrough/call-tracking/ruby/rails)

      Call Tracking helps you measure the effectiveness of marketing campaigns.

      ### Did this help?

      Thanks for checking out this tutorial! If you have any feedback
      to share with us, we'd love to hear it.
      [Contact the Twilio Developer Education Team](mailto:deved-oss@twilio.com) to let us know what you think.
